AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to create CloudWatch Alarm for CPU Utilization'

Parameters:
  InstanceId:
    Type: String
    Description: 'ID of the EC2 instance to monitor'
  AlarmName:
    Type: String
    Description: 'Name for the CPU Utilization alarm'
    Default: 'High-CPU-Alarm'
  CPUThreshold:
    Type: Number
    Description: 'CPU Utilization threshold percentage'
    Default: 80
  SNSTopicArn:
    Type: String
    Description: 'SNS Topic ARN for alarm notifications'

Resources:
  MetricCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt MetricCheckRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponence
          import time
          
          def handler(event, context):
              # Initialize response data
              response_data = {'MetricExists': False}
              
              if event['RequestType'] in ['Create', 'Update']:
                  cloudwatch = boto3.client('cloudwatch')
                  instance_id = event['ResourceProperties']['InstanceId']
                  
                  # Try up to 3 times with a delay
                  for attempt in range(3):
                      try:
                          response = cloudwatch.list_metrics(
                              Namespace='AWS/EC2',
                              MetricName='CPUUtilization',
                              Dimensions=[
                                  {
                                      'Name': 'InstanceId',
                                      'Value': instance_id
                                  }
                              ]
                          )
                          
                          metrics_exist = len(response['Metrics']) > 0
                          if metrics_exist:
                              response_data['MetricExists'] = True
                              break
                          elif attempt < 2:  # Wait before retry if metrics don't exist
                              time.sleep(10)
                      except Exception as e:
                          if attempt == 2:  # Last attempt
                              return cfnresponse.send(event, context, cfnresponse.FAILED, 
                                  {'Error': str(e)})
                          time.sleep(10)
              
              # Create alarm only if metric exists
              if response_data['MetricExists']:
                  try:
                      cloudwatch = boto3.client('cloudwatch')
                      alarm_name = event['ResourceProperties']['AlarmName']
                      threshold = float(event['ResourceProperties']['Threshold'])
                      sns_topic = event['ResourceProperties']['SNSTopicArn']
                      
                      cloudwatch.put_metric_alarm(
                          AlarmName=alarm_name,
                          MetricName='CPUUtilization',
                          Namespace='AWS/EC2',
                          Statistic='Average',
                          Period=300,
                          EvaluationPeriods=2,
                          DatapointsToAlarm=2,
                          Threshold=threshold,
                          ComparisonOperator='GreaterThanThreshold',
                          TreatMissingData='notBreaching',
                          Dimensions=[
                              {
                                  'Name': 'InstanceId',
                                  'Value': instance_id
                              }
                          ],
                          AlarmDescription=f'Alarm when CPU exceeds {threshold}% for 10 minutes',
                          AlarmActions=[sns_topic]
                      )
                      response_data['AlarmCreated'] = True
                  except Exception as e:
                      return cfnresponse.send(event, context, cfnresponse.FAILED, 
                          {'Error': str(e)})
              
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

  MetricCheckRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:ListMetrics
                  - cloudwatch:PutMetricAlarm
                Resource: '*'

  MetricCheck:
    Type: Custom::MetricCheck
    Properties:
      ServiceToken: !GetAtt MetricCheckFunction.Arn
      InstanceId: !Ref InstanceId
      AlarmName: !Ref AlarmName
      Threshold: !Ref CPUThreshold
      SNSTopicArn: !Ref SNSTopicArn

Outputs:
  MetricExists:
    Description: 'Whether the CPU Utilization metric exists for the instance'
    Value: !GetAtt MetricCheck.MetricExists
  AlarmCreated:
    Description: 'Whether the alarm was created'
    Value: !GetAtt MetricCheck.AlarmCreated
